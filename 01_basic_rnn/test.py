
# basic RNN using one-hot encdoing time series song data

import tensorflow as tf
import numpy as np

import RNN_model as rnn

sv_datetime = "20180219-144351"

def main(_):
    # melody : [50, 10, 17, 17, 17, 15, 13,  17, 17, 17, 17, 17, 15, 13,  17, 50, 17, 17, 15, 13,  17, 17, 17, 17, 15, 17, 15, 13,   10, 10, 17, 17, 17, 17, 15, 13,  17, 50, 17, 15, 17, 15, 13,  20, 50, 17, 17, 17, 15, 13,  17, 15, 15, 15, 15, 17, 15, 13,   10, 22, 22, 50, 10, 10, 13,  10, 22, 22, 50, 22, 22, 22,  20, 50, 20, 20, 20, 25, 24,  20, 50, 17, 15, 13,   10, 22, 22, 50, 10, 10, 13,  10, 22, 22, 50, 22, 22, 22,  20, 50, 20, 20, 20, 25, 24,  25, 24, 50, 17, 20,   22, 22, 17, 20, 17, 20,  22, 22, 20, 25, 25, 24, 25,  20, 50, 20, 25, 25, 24, 25,  29, 27, 25, 24, 20,   22, 22, 17, 20, 17, 20,  22, 22, 20, 25, 25, 24, 25,  20, 50, 20, 25, 25, 24, 25,  29, 27, 25, 24, 24]
    # rhythm : [2, 2, 2, 2, 4, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 4, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2,   4, 3, 1, 2, 2, 2, 2,  4, 3, 1, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  8, 2, 2, 2, 2,   4, 3, 1, 2, 2, 2, 2,  4, 3, 1, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  2, 6, 4, 2, 2,  4, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 4, 4, 2, 2,   4, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 4, 4, 2, 2,]
    # set sample song data (Roly Poly)
    sample = [50, 10, 17, 17, 17, 15, 13, 17, 17, 17, 17, 17, 15, 13, 17, 50, 17, 17, 15, 13, 17, 17, 17, 17, 15, 17,
              15, 13, 10, 10, 17, 17, 17, 17, 15, 13, 17, 50, 17, 15, 17, 15, 13, 20, 50, 17, 17, 17, 15, 13, 17, 15,
              15, 15, 15, 17, 15, 13, 10, 22, 22, 50, 10, 10, 13, 10, 22, 22, 50, 22, 22, 22, 20, 50, 20, 20, 20, 25,
              24, 20, 50, 17, 15, 13, 10, 22, 22, 50, 10, 10, 13, 10, 22, 22, 50, 22, 22, 22, 20, 50, 20, 20, 20, 25,
              24, 25, 24, 50, 17, 20, 22, 22, 17, 20, 17, 20, 22, 22, 20, 25, 25, 24, 25, 20, 50, 20, 25, 25, 24, 25,
              29, 27, 25, 24, 20, 22, 22, 17, 20, 17, 20, 22, 22, 20, 25, 25, 24, 25, 20, 50, 20, 25, 25, 24, 25, 29,
              27, 25, 24, 24]
    # sample = [2, 2, 2, 2, 4, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 4, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2,   2, 2, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2,   4, 3, 1, 2, 2, 2, 2,  4, 3, 1, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  8, 2, 2, 2, 2,   4, 3, 1, 2, 2, 2, 2,  4, 3, 1, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  2, 6, 4, 2, 2,  4, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 4, 4, 2, 2,   4, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,  4, 2, 2, 2, 2, 2, 2,  4, 4, 4, 2, 2,]

    song_length = len(sample)

    test_sample = np.zeros(song_length)
    test_sample[0] = 4
    #test_sample = sample

    test_melody = []
    test_melody.append(test_sample)

    print(test_melody)

    # Test the RNN model
    model = rnn.RNN(song_length=song_length,
                    batch_size=len(test_melody),
                    mode='test')
    x_data, _ = model.data2idx(test_melody)
    x_data = np.array(x_data)

    model.build()

    saver = tf.train.Saver()

    with tf.Session() as sess:
        saver.restore(sess, "./save/" + sv_datetime + "/rnn_model.ckpt")

        print("sample: ", sample[1:])

        result = sess.run(model.prediction, feed_dict={model.X: x_data})

        result_str = [model.idx2char[c] for c in np.squeeze(result)]

        print("result : ", result_str)
        error = np.array(result_str) - np.array(sample[1:])

        print("error : ", error)

if __name__ == '__main__':
    tf.app.run()


